import array
import ctypes
import inspect
import math
import sys
import threading
import time
from io import TextIOBase
from queue import Queue

import numpy as np
import scipy.io as sio
import serial
import tkinter as tk
from pylsl import StreamInlet, local_clock, resolve_stream
from PyQt5 import QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog
import pyqtgraph as pg
from tkinter import simpledialog

DISPLAY_TIME_SPAN = 10
SAMPLE_FREQUENCY = 500
data_length = DISPLAY_TIME_SPAN * SAMPLE_FREQUENCY

file_ECG = None
file_event = None
file_writing_flag = 0

curve = []
data = []
data_bytes = bytearray()

que = []
index_now = []
velocity = []
label = []
rate = []

heart_rate_label = None

x_scale = [i * 10 / data_length for i in range(data_length)]

filter_parameter = [
    -0.000241862601478186,
    -0.00618333017151190,
    -0.00292015458774930,
    -0.00352860546326712,
    -0.00381533991703169,
    -0.00390240672340895,
    -0.00377155150017023,
    -0.00344323716575758,
    -0.00279819458188298,
    -0.00601017086427698,
    -3.23155675236391e-05,
    0.000212473328685507,
    0.000214100793306813,
    0.000216402527767417,
    0.000218739282812823,
    0.000221743351354569,
    0.000224804101431031,
    0.000228482819103074,
    0.000232195938703678,
    0.000236564217288778,
    0.000240943767462462,
    0.000245970851519319,
    0.000250998652576486,
    0.000256657745943320,
    0.000262331953388789,
    0.000268593985116165,
    0.000274871920464321,
    0.000281780760067274,
    0.000288670368598727,
    0.000296166754004045,
    0.000303612804371826,
    0.000311621665358330,
    0.000319681157459461,
    0.000328270774612938,
    0.000336820632867949,
    0.000345946861787297,
    0.000355001005403041,
    0.000364616756871584,
    0.000374146402646035,
    0.000384209723779878,
    0.000394269223207374,
    0.000404791195744381,
    0.000415224216487852,
    0.000426184458410963,
    0.000437027297644453,
    0.000448379060034008,
    0.000459765558908533,
    0.000471333568861225,
    0.000482911607282858,
    0.000494986600433337,
    0.000506906877652680,
    0.000519305329636683,
    0.000531529737419900,
    0.000544200440201160,
    0.000556806462295274,
    0.000569559982355034,
    0.000582328414402971,
    0.000595530233654461,
    0.000608485010925849,
    0.000621823577937644,
    0.000634900021395484,
    0.000648342695208030,
    0.000661555065762399,
    0.000675117134004698,
    0.000688403791089957,
    0.000702043279205866,
    0.000715381843108796,
    0.000729054067871398,
    0.000742407365294652,
    0.000756063029655742,
    0.000769407859054698,
    0.000783014866177094,
    0.000796269554108974,
    0.000809811693810158,
    0.000823010023445550,
    0.000836534158739822,
    0.000849804306071187,
    0.000862880376581668,
    0.000875875368957665,
    0.000889015959093708,
    0.000901726531231015,
    0.000914637864425536,
    0.000927098852298660,
    0.000939745196939242,
    0.000951980788164564,
    0.000963985193933147,
    0.000975902690662249,
    0.000987863404503204,
    0.000999301962470884,
    0.00101085238151819,
    0.00102187214629162,
    0.00103295219110459,
    0.00104356231803754,
    0.00105420008369322,
    0.00106426526370020,
    0.00107438763009171,
    0.00108391992383149,
    0.00109349326064004,
    0.00110246206252105,
    0.00111142096023749,
    0.00111981850897158,
    0.00112814533048731,
    0.00113582101515375,
    0.00114348179432277,
    0.00115048024202169,
    0.00115744143033935,
    0.00116371368951634,
    0.00116987338019362,
    0.00117535540074039,
    0.00118073662429687,
    0.00118538614602424,
    0.00118993231236909,
    0.00119372411711218,
    0.00119738867541159,
    0.00120027788790729,
    0.00120297959160257,
    0.00120492128143958,
    0.00120665269011750,
    0.00120751280477309,
    0.00120804735319330,
    0.00120726370147976,
    0.00120395379003982,
    0.00121034841823745,
    0.00120782772642264,
    0.00120616593551287,
    0.00120439032045188,
    0.00120167808111322,
    0.00119854971248166,
    0.00119423321954481,
    0.00118768599169546,
    0.00118849551267828,
    0.00117826370380175,
    0.00116964260821439,
    0.00116155966230625,
    0.00115288288038599,
    0.00114412595970646,
    0.00113455354716389,
    0.00112473578487770,
    0.00111404540735775,
    0.00110309140380077,
    0.00109119065810992,
    0.00107899827062984,
    0.00106583001694339,
    0.00105234621155236,
    0.00103788070284128,
    0.00102305361433860,
    0.00100725969895938,
    0.000991109110440077,
    0.000973924836167329,
    0.000956366591383154,
    0.000937760189315824,
    0.000918783485189065,
    0.000898855606782382,
    0.000878439043818011,
    0.000857013224487071,
    0.000835192955475456,
    0.000812311468299397,
    0.000789039439625504,
    0.000764706617741790,
    0.000739983603268677,
    0.000714263714007165,
    0.000688023798852553,
    0.000660774272953085,
    0.000633122154475912,
    0.000604403133739483,
    0.000575285902687734,
    0.000545145092325801,
    0.000514393415934166,
    0.000482782210449701,
    0.000450732663425887,
    0.000417602551447614,
    0.000384065820239558,
    0.000349452014218593,
    0.000314433890628060,
    0.000278384375382015,
    0.000241768593738243,
    0.000204319162481330,
    0.000166397455591948,
    0.000127376851742238,
    8.79564657292383e-05,
    4.74833967047798e-05,
    6.63810489044910e-06,
    -3.52166166427070e-05,
    -7.74698170154019e-05,
    -0.000120743059008500,
    -0.000164376766574787,
    -0.000209035711985310,
    -0.000254039877429829,
    -0.000300054793305119,
    -0.000346403847545959,
    -0.000393727177543936,
    -0.000441399397317129,
    -0.000490021884272656,
    -0.000538928487812777,
    -0.000588779271352387,
    -0.000638904442534124,
    -0.000690024755427625,
    -0.000741945657849665,
    -0.000794112307623342,
    -0.000846866599757318,
    -0.000900534968419690,
    -0.000954463724692410,
    -0.00100931322615235,
    -0.00106440502022170,
    -0.00112039754519593,
    -0.00117694987402342,
    -0.00123361779035843,
    -0.00129089663487595,
    -0.00134902199135877,
    -0.00140732470603168,
    -0.00146645968876734,
    -0.00152576382459960,
    -0.00158582457829640,
    -0.00164609203427129,
    -0.00170713328715977,
    -0.00176828590882055,
    -0.00183020496494691,
    -0.00189221414612019,
    -0.00195496969209245,
    -0.00201780745711805,
    -0.00208132619171779,
    -0.00214496193493867,
    -0.00220926084010269,
    -0.00227356477602885,
    -0.00233853465262199,
    -0.00240350034764503,
    -0.00246912013565605,
    -0.00253473466327651,
    -0.00260090778059725,
    -0.00266704519661662,
    -0.00273375847047081,
    -0.00280037708395708,
    -0.00286755470661116,
    -0.00293461192481079,
    -0.00300220006183793,
    -0.00306965378901851,
    -0.00313755181866847,
    -0.00320531172702865,
    -0.00327353676801340,
    -0.00334155737096134,
    -0.00341003083372801,
    -0.00347825541575772,
    -0.00354517789333208,
    -0.00361483468403496,
    -0.00368359621189993,
    -0.00375210496384257,
    -0.00382099039889886,
    -0.00388955637275691,
    -0.00395844647831516,
    -0.00402702914165579,
    -0.00409462022410647,
    -0.00416463933065297,
    -0.00423293159934225,
    -0.00430063601640685,
    -0.00436857079613318,
    -0.00443606175889654,
    -0.00450377465941109,
    -0.00457103682869956,
    -0.00463844273595584,
    -0.00470535128738135,
    -0.00477240481916911,
    -0.00483890461156584,
    -0.00490551302352105,
    -0.00497152794905846,
    -0.00503760853558132,
    -0.00510307856094369,
    -0.00516854654472621,
    -0.00523338380974212,
    -0.00529822824769233,
    -0.00536237646399113,
    -0.00542647995954812,
    -0.00548982318221877,
    -0.00555304050484515,
    -0.00561563454279720,
    -0.00567802247336105,
    -0.00573963134371295,
    -0.00580109759609399,
    -0.00586172263644098,
    -0.00592217105107264,
    -0.00598174460932463,
    -0.00604108962521099,
    -0.00609967222311659,
    -0.00615789541165676,
    -0.00621521866947604,
    -0.00627227926006493,
    -0.00632838428419300,
    -0.00638419215480138,
    -0.00643910926114895,
    -0.00649351184744534,
    -0.00654699867703690,
    -0.00660014208053248,
    -0.00665224343118316,
    -0.00670396735022964,
    -0.00675461520852717,
    -0.00680484437331614,
    -0.00685404269786637,
    -0.00690262927149849,
    -0.00695022497422569,
    -0.00699736039329645,
    -0.00704332168212629,
    -0.00708877572881731,
    -0.00713303413937129,
    -0.00717676383550871,
    -0.00721932638367332,
    -0.00726132796114796,
    -0.00730210977070104,
    -0.00734233295951351,
    -0.00738130425982293,
    -0.00741969694326344,
    -0.00745682087666762,
    -0.00749334162154748,
    -0.00752861130129365,
    -0.00756324036148363,
    -0.00759659350844617,
    -0.00762935601598877,
    -0.00766087578240639,
    -0.00769190308490440,
    -0.00772195157877627,
    -0.00775006745468789,
    -0.00777780516092437,
    -0.00780463308405751,
    -0.00783007468280841,
    -0.00785480295372079,
    -0.00787814093886709,
    -0.00790077572794816,
    -0.00792219943021980,
    -0.00794181229522325,
    -0.00796123612781566,
    -0.00797965000057413,
    -0.00799660917368424,
    -0.00801281024646620,
    -0.00802758736085755,
    -0.00804158305078187,
    -0.00805421344617654,
    -0.00806604037878759,
    -0.00807643227509344,
    -0.00808605731032896,
    -0.00809424211442448,
    -0.00810165810383242,
    0.000427892656374111,
    0.210148774362507,
    0.0961841951232815,
    0.118230551261127,
    0.129042660734055,
    0.132877361306260,
    0.129042660734055,
    0.118230551261127,
    0.0961841951232815,
    0.210148774362507,
    0.000427892656374112,
    -0.00810165810383242,
    -0.00809424211442448,
    -0.00808605731032896,
    -0.00807643227509344,
    -0.00806604037878758,
    -0.00805421344617655,
    -0.00804158305078187,
    -0.00802758736085755,
    -0.00801281024646620,
    -0.00799660917368424,
    -0.00797965000057413,
    -0.00796123612781566,
    -0.00794181229522325,
    -0.00792219943021980,
    -0.00790077572794816,
    -0.00787814093886709,
    -0.00785480295372079,
    -0.00783007468280841,
    -0.00780463308405751,
    -0.00777780516092437,
    -0.00775006745468789,
    -0.00772195157877627,
    -0.00769190308490440,
    -0.00766087578240639,
    -0.00762935601598877,
    -0.00759659350844617,
    -0.00756324036148363,
    -0.00752861130129365,
    -0.00749334162154748,
    -0.00745682087666761,
    -0.00741969694326344,
    -0.00738130425982293,
    -0.00734233295951351,
    -0.00730210977070104,
    -0.00726132796114797,
    -0.00721932638367332,
    -0.00717676383550871,
    -0.00713303413937129,
    -0.00708877572881731,
    -0.00704332168212629,
    -0.00699736039329645,
    -0.00695022497422569,
    -0.00690262927149849,
    -0.00685404269786638,
    -0.00680484437331614,
    -0.00675461520852717,
    -0.00670396735022964,
    -0.00665224343118316,
    -0.00660014208053248,
    -0.00654699867703690,
    -0.00649351184744534,
    -0.00643910926114895,
    -0.00638419215480138,
    -0.00632838428419299,
    -0.00627227926006493,
    -0.00621521866947604,
    -0.00615789541165676,
    -0.00609967222311659,
    -0.00604108962521099,
    -0.00598174460932463,
    -0.00592217105107264,
    -0.00586172263644098,
    -0.00580109759609399,
    -0.00573963134371295,
    -0.00567802247336105,
    -0.00561563454279720,
    -0.00555304050484515,
    -0.00548982318221877,
    -0.00542647995954812,
    -0.00536237646399113,
    -0.00529822824769233,
    -0.00523338380974212,
    -0.00516854654472621,
    -0.00510307856094369,
    -0.00503760853558132,
    -0.00497152794905846,
    -0.00490551302352105,
    -0.00483890461156584,
    -0.00477240481916911,
    -0.00470535128738135,
    -0.00463844273595584,
    -0.00457103682869956,
    -0.00450377465941109,
    -0.00443606175889654,
    -0.00436857079613318,
    -0.00430063601640685,
    -0.00423293159934225,
    -0.00416463933065297,
    -0.00409462022410647,
    -0.00402702914165579,
    -0.00395844647831516,
    -0.00388955637275691,
    -0.00382099039889886,
    -0.00375210496384257,
    -0.00368359621189993,
    -0.00361483468403496,
    -0.00354517789333208,
    -0.00347825541575772,
    -0.00341003083372801,
    -0.00334155737096134,
    -0.00327353676801340,
    -0.00320531172702865,
    -0.00313755181866847,
    -0.00306965378901851,
    -0.00300220006183793,
    -0.00293461192481079,
    -0.00286755470661116,
    -0.00280037708395708,
    -0.00273375847047081,
    -0.00266704519661662,
    -0.00260090778059725,
    -0.00253473466327651,
    -0.00246912013565605,
    -0.00240350034764503,
    -0.00233853465262199,
    -0.00227356477602885,
    -0.00220926084010269,
    -0.00214496193493867,
    -0.00208132619171779,
    -0.00201780745711805,
    -0.00195496969209245,
    -0.00189221414612019,
    -0.00183020496494691,
    -0.00176828590882055,
    -0.00170713328715977,
    -0.00164609203427129,
    -0.00158582457829640,
    -0.00152576382459960,
    -0.00146645968876734,
    -0.00140732470603168,
    -0.00134902199135877,
    -0.00129089663487595,
    -0.00123361779035843,
    -0.00117694987402342,
    -0.00112039754519593,
    -0.00106440502022170,
    -0.00100931322615235,
    -0.000954463724692410,
    -0.000900534968419690,
    -0.000846866599757318,
    -0.000794112307623342,
    -0.000741945657849665,
    -0.000690024755427625,
    -0.000638904442534124,
    -0.000588779271352386,
    -0.000538928487812777,
    -0.000490021884272656,
    -0.000441399397317130,
    -0.000393727177543936,
    -0.000346403847545958,
    -0.000300054793305119,
    -0.000254039877429829,
    -0.000209035711985310,
    -0.000164376766574787,
    -0.000120743059008500,
    -7.74698170154018e-05,
    -3.52166166427070e-05,
    6.63810489044910e-06,
    4.74833967047798e-05,
    8.79564657292383e-05,
    0.000127376851742238,
    0.000166397455591948,
    0.000204319162481330,
    0.000241768593738243,
    0.000278384375382015,
    0.000314433890628060,
    0.000349452014218593,
    0.000384065820239558,
    0.000417602551447614,
    0.000450732663425887,
    0.000482782210449701,
    0.000514393415934167,
    0.000545145092325801,
    0.000575285902687734,
    0.000604403133739483,
    0.000633122154475912,
    0.000660774272953085,
    0.000688023798852553,
    0.000714263714007165,
    0.000739983603268677,
    0.000764706617741790,
    0.000789039439625505,
    0.000812311468299397,
    0.000835192955475456,
    0.000857013224487071,
    0.000878439043818011,
    0.000898855606782382,
    0.000918783485189065,
    0.000937760189315824,
    0.000956366591383154,
    0.000973924836167329,
    0.000991109110440078,
    0.00100725969895938,
    0.00102305361433860,
    0.00103788070284128,
    0.00105234621155236,
    0.00106583001694339,
    0.00107899827062984,
    0.00109119065810992,
    0.00110309140380077,
    0.00111404540735775,
    0.00112473578487770,
    0.00113455354716389,
    0.00114412595970646,
    0.00115288288038599,
    0.00116155966230625,
    0.00116964260821439,
    0.00117826370380175,
    0.00118849551267828,
    0.00118768599169546,
    0.00119423321954481,
    0.00119854971248166,
    0.00120167808111322,
    0.00120439032045188,
    0.00120616593551287,
    0.00120782772642264,
    0.00121034841823745,
    0.00120395379003982,
    0.00120726370147976,
    0.00120804735319330,
    0.00120751280477309,
    0.00120665269011750,
    0.00120492128143958,
    0.00120297959160257,
    0.00120027788790729,
    0.00119738867541159,
    0.00119372411711218,
    0.00118993231236909,
    0.00118538614602424,
    0.00118073662429687,
    0.00117535540074039,
    0.00116987338019361,
    0.00116371368951634,
    0.00115744143033935,
    0.00115048024202169,
    0.00114348179432277,
    0.00113582101515375,
    0.00112814533048731,
    0.00111981850897158,
    0.00111142096023749,
    0.00110246206252105,
    0.00109349326064004,
    0.00108391992383149,
    0.00107438763009171,
    0.00106426526370020,
    0.00105420008369322,
    0.00104356231803754,
    0.00103295219110459,
    0.00102187214629162,
    0.00101085238151819,
    0.000999301962470884,
    0.000987863404503204,
    0.000975902690662249,
    0.000963985193933147,
    0.000951980788164564,
    0.000939745196939242,
    0.000927098852298660,
    0.000914637864425536,
    0.000901726531231015,
    0.000889015959093708,
    0.000875875368957665,
    0.000862880376581668,
    0.000849804306071186,
    0.000836534158739822,
    0.000823010023445550,
    0.000809811693810157,
    0.000796269554108974,
    0.000783014866177094,
    0.000769407859054698,
    0.000756063029655742,
    0.000742407365294652,
    0.000729054067871398,
    0.000715381843108796,
    0.000702043279205866,
    0.000688403791089957,
    0.000675117134004698,
    0.000661555065762400,
    0.000648342695208030,
    0.000634900021395484,
    0.000621823577937644,
    0.000608485010925849,
    0.000595530233654461,
    0.000582328414402971,
    0.000569559982355034,
    0.000556806462295274,
    0.000544200440201160,
    0.000531529737419900,
    0.000519305329636683,
    0.000506906877652680,
    0.000494986600433337,
    0.000482911607282858,
    0.000471333568861225,
    0.000459765558908533,
    0.000448379060034008,
    0.000437027297644453,
    0.000426184458410963,
    0.000415224216487852,
    0.000404791195744381,
    0.000394269223207374,
    0.000384209723779878,
    0.000374146402646035,
    0.000364616756871584,
    0.000355001005403041,
    0.000345946861787297,
    0.000336820632867949,
    0.000328270774612938,
    0.000319681157459462,
    0.000311621665358330,
    0.000303612804371826,
    0.000296166754004045,
    0.000288670368598727,
    0.000281780760067274,
    0.000274871920464321,
    0.000268593985116165,
    0.000262331953388789,
    0.000256657745943320,
    0.000250998652576486,
    0.000245970851519319,
    0.000240943767462462,
    0.000236564217288778,
    0.000232195938703678,
    0.000228482819103074,
    0.000224804101431031,
    0.000221743351354569,
    0.000218739282812823,
    0.000216402527767417,
    0.000214100793306813,
    0.000212473328685507,
    -3.23155675236391e-05,
    -0.00601017086427698,
    -0.00279819458188298,
    -0.00344323716575758,
    -0.00377155150017023,
    -0.00390240672340895,
    -0.00381533991703169,
    -0.00352860546326712,
    -0.00292015458774930,
    -0.00618333017151190,
    -0.000241862601478186,
]
filter_parameter = np.array(filter_parameter)
ECG_buffer = np.zeros(689)

marker_matrix = [[] for i in range(2)]
cumulative_data_index = 0

mSerialECG = None

def _async_raise(tid, exctype):
    """raises the exception, performs cleanup if needed"""
    tid = ctypes.c_long(tid)
    if not inspect.isclass(exctype):
        exctype = type(exctype)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # """if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)
        raise SystemError("PyThreadState_SetAsyncExc failed")


def stop_thread(thread):
    _async_raise(thread.ident, SystemExit)


def pylsl_receive_data():
    streams = resolve_stream("type", "Markers")

    # create a new inlet to read from the stream
    inlet = StreamInlet(streams[0])

    while True:
        # get a new sample (you can also omit the timestamp part if you're not
        # interested in it)
        sample, timestamp = inlet.pull_sample()
        print(local_clock(), timestamp, sample)
        marker_matrix[0].append(sample)
        marker_matrix[1].append(cumulative_data_index)

        if file_writing_flag:
            sio.savemat(
                file_event, {"type": marker_matrix[0], "latency": marker_matrix[1]}
            )


def serial_ECG():
    global data_bytes, cumulative_data_index
    while mSerialECG:
        count = mSerialECG.inWaiting()
        if count:
            rec_str = mSerialECG.read(count)
            data_bytes = data_bytes + rec_str
            data_len = len(data_bytes)
            k = 0
            while k + 22 < data_len:  # 数据包为22个字节
                if (
                    data_bytes[k] == 0x41
                    and data_bytes[k + 22] == 0x0A
                    and data_bytes[k + 1] == 0x30
                ):
                    p = data_bytes[k + 1] - 0x30
                    t = time.time()
                    if file_writing_flag:
                        file_ECG.write("\r\n" + str(round(t * 1000)) + " A" + str(p) + " ")
                    for k2 in range(10):
                        data_put = (
                            data_bytes[k + 2 + 2 * k2] * 256
                            + data_bytes[k + 3 + 2 * k2]
                        )
                        if data_put > 5000:
                            data_put = 0

                        filtered = 0.0
                        ECG_buffer[0:] = [*ECG_buffer[1:], data_put]
                        filtered = np.dot(ECG_buffer, filter_parameter)
                        que[p].put(filtered)
                        if file_writing_flag:
                            file_ECG.write(str(data_put) + " ")
                    rate[p] = rate[p] + 1
                    cumulative_data_index = cumulative_data_index + 1
                    k = k + 22
                else:
                    k = k + 1
            data_bytes[0:k] = b""


class MainWidget(QtWidgets.QMainWindow):
    def action_save(self):
        global file_ECG, file_event, file_writing_flag

        if self.saveButton.text() == "SaveData":
            self.saveButton.setText("StopSaveData")
            file_name, file_ok = QFileDialog.getSaveFileName(
                self, "文件保存", "./", "Text Files (*.txt)"
            )
            if not file_name:
                file_name = "ECG_default.txt"

            file_ECG = open(file_name, "w")
            file_ECG.write("ECG Data" + "\r\n")

            file_event = file_name[:-4] + "_event.mat"

            file_writing_flag = 1

        elif self.saveButton.text() == "StopSaveData" and isinstance(file_ECG, TextIOBase):
            self.saveButton.setText("SaveData")

            file_writing_flag = 0
            file_ECG.close()

    def action_cancel_save(self):
        global file_writing_flag
        if self.saveButton.text() == "StopSaveData":
            self.saveButton.setText("SaveData")

            file_writing_flag = 0
            file_ECG.close()

    def __init__(self):
        super().__init__()
        global heart_rate_label
        devices_name = ["ECG"]
        devices_name_label = []
        pw = []
        self.setWindowTitle("ECG")  # 设置窗口标题
        main_widget = QtWidgets.QWidget()  # 实例化一个widget部件
        main_layout = QtWidgets.QGridLayout()  # 实例化一个网格布局层
        main_widget.setLayout(main_layout)  # 设置主widget部件的布局为网格布局
        main_widget.setStyleSheet("QWidget{background:white;}")  # 设置背景为白色

        for k in range(1):
            pw.insert(k, pg.PlotWidget(enableAutoRange=True))
            # pw.insert(k, pg.PlotWidget())
            pw[k].setLabel(axis="bottom", text="Time / second")
            pw[k].setLabel(axis="left", text="Amplitude / mV")
            pw[k].setBackground("w")

            data.insert(k, array.array("i"))
            data[k] = np.zeros(data_length).__array__("d")

            que.insert(k, Queue(maxsize=0))
            index_now.insert(k, 0)
            label.insert(k, QtWidgets.QLabel())
            label[k].setAlignment(Qt.AlignCenter)
            label[k].setText(" Receiving rate:  0 % ")

            devices_name_label.insert(k, QtWidgets.QLabel())
            devices_name_label[k].setAlignment(Qt.AlignCenter)
            devices_name_label[k].setStyleSheet(
                "color: #000000; font-size:24px; font-weight:bold"
            )
            devices_name_label[k].setText(devices_name[k])

            rate.insert(k, 0)
            velocity.insert(k, 0)

        for k, p, d, color in zip(range(1), pw, data, ["#FF8C00"]):
            # color palette reference https://www.sioe.cn/yingyong/yanse-rgb-16/
            curve.insert(k, (p.plot(d, x=x_scale, pen=pg.mkPen(color=color))))
            main_layout.addWidget(devices_name_label[k], 1 + 3 * k, 1, 1, 5)
            main_layout.addWidget(pw[k], 2 + 3 * k, 1, 1, 5)
            main_layout.addWidget(label[k], 3 + 3 * k, 1, 1, 3)

        # hr label display the heart rate value
        heart_rate_label = QtWidgets.QLabel()
        heart_rate_label.setAlignment(Qt.AlignCenter)
        heart_rate_label.setText(" Heart Rate： 0 bpm")
        main_layout.addWidget(heart_rate_label, 3, 4, 1, 2)

        # Add button used for saving
        self.saveButton = QtWidgets.QPushButton(main_widget)
        self.saveButton.setText("SaveData")
        self.saveButton.setStyleSheet(
            "QPushButton{color:#FFA500}"
            "QPushButton:hover{color:#DC143C}"
            "QPushButton{background-color:#000000}"
            "QPushButton{border:1px}"
            "QPushButton{border-radius:10px}"
            "QPushButton{padding:6px 6px}"
            "QPushButton{font:bold 20px}"
        )
        self.saveButton.clicked.connect(self.action_save)
        main_layout.addWidget(self.saveButton, 4, 1, 1, 5)

        self.setCentralWidget(main_widget)  # 设置窗口默认部件为主widget

    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(
            self,
            "Impedance",
            "Do you want to exit?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
        )
        if result == QtWidgets.QMessageBox.Yes:
            stop_thread(threadECG)
            stop_thread(threadMarker)
            print("Close successfully")
            self.close()
            event.accept()
        else:
            event.ignore()


R_detect_flag = 0
hrCaculationCount = 1600
hrCaculationArray = [0 for i in range(hrCaculationCount)]
R_interval = [0 for i in range(5)]
R_interval_index = 0
last_time_index = 0
hr = 0


def consumer_ecg():
    global R_detect_flag, hrCaculationCount, hrCaculationArray, R_interval, R_interval_index, last_time_index, hr, heart_rate_label
    while True:
        if index_now[0] < data_length:
            v_body = que[0].get() * 36 / 4096
            data[0][index_now[0]] = v_body
            index_now[0] = index_now[0] + 1

        else:
            row_data = que[0].get()
            v_body = row_data * 36 / 4096
            data[0][:-1] = data[0][1:]
            data[0][index_now[0] - 1] = v_body
            if R_detect_flag < hrCaculationCount:
                hrCaculationArray[R_detect_flag] = row_data
                R_detect_flag += 1
            else:
                # Heart rate calculation
                startR = [0 for i in range(hrCaculationCount)]
                endR = [0 for i in range(hrCaculationCount)]
                maxR = [0 for i in range(hrCaculationCount)]
                posR = [0 for i in range(hrCaculationCount)]
                interval = [0 for i in range(hrCaculationCount)]
                threshold = max(hrCaculationArray) * 0.75
                R_flag = 0
                k = 0
                for i1 in range(hrCaculationCount):
                    if hrCaculationArray[i1] > threshold and R_flag == 0:
                        startR[k] = i1
                        R_flag = 1
                    elif hrCaculationArray[i1] < threshold and R_flag == 1:
                        endR[k] = i1
                        R_flag = 0
                        maxR[k] = max(hrCaculationArray[int(startR[k]) : int(endR[k])])
                        posR[k] = hrCaculationArray.index(maxR[k])
                        k += 1

                q = 0
                posPast = posR[0]
                if last_time_index != 0:
                    old_and_new = posR[0] + hrCaculationCount - last_time_index
                    if 200 < old_and_new < 600:
                        interval[q] = old_and_new
                        q += 1
                if k > 0:
                    last_time_index = posR[k - 1]
                if 2 <= k <= 8:
                    R_number = k
                    i1 = 0
                    while i1 < k - 1:
                        if posR[i1 + 1] - posPast < 200 or posR[i1 + 1] - posPast > 600:
                            posR[i1 + 1] = -1
                            R_number -= 1
                        else:
                            interval[q] = posR[i1 + 1] - posPast
                            posPast = posR[i1 + 1]
                            q += 1
                        i1 += 1
                    if 2 <= R_number < 7:
                        for p in range(q):
                            R_interval[R_interval_index] = interval[p]
                            R_interval_index = (R_interval_index + 1) % 5
                            R_interval_mean = np.mean(R_interval)
                            hr = 30720 / R_interval_mean
                            if R_interval[4] == 0 or hr < 50 or hr > 140:
                                hr = 0
                    else:
                        hr = 0
                else:
                    for p in range(5):
                        R_interval[p] = 0
                        hr = 0
                    R_interval_index = 0
                heart_rate_label.setText(" Heart Rate: %d bpm" % hr)
                print("hr: ", hr)

                R_detect_flag = 0


def plot_data():
    curve[0].setData(x_scale, data[0])


def rate_refresh():
    global rate, velocity, label
    for k in range(1):
        velocity[k] = rate[k] - velocity[k]
        receiveRate = math.ceil(velocity[k] * 10 * 100 / (3 * SAMPLE_FREQUENCY))
        velocity[k] = rate[k]
        if receiveRate > 100:
            receiveRate = 100

        label[k].setText(" Receiving rate:  %d %%" % receiveRate)


if __name__ == "__main__":
    
    # set serial port and bps
    ROOT = tk.Tk()
    ROOT.withdraw()
    port_open_flag = False
    show_message = "Select the device port:\t\t\t"
    
    while not port_open_flag:
        port = simpledialog.askstring("UART", show_message)
        if port is not None:
            bps = 250000
            try:
                mSerialECG = serial.Serial(port, bps)
                pass
            except Exception as e:
                show_message = "Please check and select the correct device port:"
                print("Failed to open the serial port: " + port)
            else:
                port_open_flag = True
                app = QtWidgets.QApplication(sys.argv)
                gui = MainWidget()

                threadECG = threading.Thread(target=serial_ECG, daemon=True)
                threadECG.start()

                threadMarker = threading.Thread(target=pylsl_receive_data, daemon=True)
                threadMarker.start()

                gui.show()
                timer = pg.QtCore.QTimer()
                timer.timeout.connect(plot_data)
                timer.start(30)

                timer1 = pg.QtCore.QTimer()
                timer1.timeout.connect(rate_refresh)
                timer1.start(3000)
                
                process = []
                process.insert(0, threading.Thread(target=consumer_ecg))

                for p in process:
                    p.daemon = True
                    p.start()
                app.exec()
        else:
            port_open_flag = True